/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setBearerAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { SignDeveloperMessage200Response } from "../models";
// @ts-ignore
import { SignDeveloperTypedData200Response } from "../models";
// @ts-ignore
import { SignMessageForDeveloperRequest } from "../models";
// @ts-ignore
import { SignTypedDataForDeveloperRequest } from "../models";
/**
 * SigningApi - axios parameter creator
 * @export
 */
export const SigningApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Sign the EIP-191 message from a specified developer-controlled wallet. Please note that not all the Dapps currently support Smart Contract Account (SCA), the difference between EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types), and you can check the list of Dapps that support SCA: https://eip1271.io/.
     * @summary Sign message
     * @param {SignMessageForDeveloperRequest} signMessageForDeveloperRequest Sign message for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signDeveloperMessage: async (
      signMessageForDeveloperRequest: SignMessageForDeveloperRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'signMessageForDeveloperRequest' is not null or undefined
      assertParamExists(
        "signDeveloperMessage",
        "signMessageForDeveloperRequest",
        signMessageForDeveloperRequest
      );
      const localVarPath = `/developer/sign/message`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        signMessageForDeveloperRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Sign the EIP-712 typed structured data from a specified developer-controlled wallet. Please note that not all the Dapps currently support Smart Contract Account (SCA), the difference between EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types), and you can check the list of Dapps that support SCA: https://eip1271.io/.
     * @summary Sign typed data
     * @param {SignTypedDataForDeveloperRequest} signTypedDataForDeveloperRequest Sign message for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signDeveloperTypedData: async (
      signTypedDataForDeveloperRequest: SignTypedDataForDeveloperRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'signTypedDataForDeveloperRequest' is not null or undefined
      assertParamExists(
        "signDeveloperTypedData",
        "signTypedDataForDeveloperRequest",
        signTypedDataForDeveloperRequest
      );
      const localVarPath = `/developer/sign/typedData`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        signTypedDataForDeveloperRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SigningApi - functional programming interface
 * @export
 */
export const SigningApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SigningApiAxiosParamCreator(configuration);
  return {
    /**
     * Sign the EIP-191 message from a specified developer-controlled wallet. Please note that not all the Dapps currently support Smart Contract Account (SCA), the difference between EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types), and you can check the list of Dapps that support SCA: https://eip1271.io/.
     * @summary Sign message
     * @param {SignMessageForDeveloperRequest} signMessageForDeveloperRequest Sign message for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signDeveloperMessage(
      signMessageForDeveloperRequest: SignMessageForDeveloperRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SignDeveloperMessage200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.signDeveloperMessage(
          signMessageForDeveloperRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Sign the EIP-712 typed structured data from a specified developer-controlled wallet. Please note that not all the Dapps currently support Smart Contract Account (SCA), the difference between EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types), and you can check the list of Dapps that support SCA: https://eip1271.io/.
     * @summary Sign typed data
     * @param {SignTypedDataForDeveloperRequest} signTypedDataForDeveloperRequest Sign message for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signDeveloperTypedData(
      signTypedDataForDeveloperRequest: SignTypedDataForDeveloperRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SignDeveloperTypedData200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.signDeveloperTypedData(
          signTypedDataForDeveloperRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * SigningApi - factory interface
 * @export
 */
export const SigningApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SigningApiFp(configuration);
  return {
    /**
     * Sign the EIP-191 message from a specified developer-controlled wallet. Please note that not all the Dapps currently support Smart Contract Account (SCA), the difference between EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types), and you can check the list of Dapps that support SCA: https://eip1271.io/.
     * @summary Sign message
     * @param {SignMessageForDeveloperRequest} signMessageForDeveloperRequest Sign message for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signDeveloperMessage(
      signMessageForDeveloperRequest: SignMessageForDeveloperRequest,
      options?: any
    ): AxiosPromise<SignDeveloperMessage200Response> {
      return localVarFp
        .signDeveloperMessage(signMessageForDeveloperRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Sign the EIP-712 typed structured data from a specified developer-controlled wallet. Please note that not all the Dapps currently support Smart Contract Account (SCA), the difference between EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types), and you can check the list of Dapps that support SCA: https://eip1271.io/.
     * @summary Sign typed data
     * @param {SignTypedDataForDeveloperRequest} signTypedDataForDeveloperRequest Sign message for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signDeveloperTypedData(
      signTypedDataForDeveloperRequest: SignTypedDataForDeveloperRequest,
      options?: any
    ): AxiosPromise<SignDeveloperTypedData200Response> {
      return localVarFp
        .signDeveloperTypedData(signTypedDataForDeveloperRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SigningApi - object-oriented interface
 * @export
 * @class SigningApi
 * @extends {BaseAPI}
 */
export class SigningApi extends BaseAPI {
  /**
   * Sign the EIP-191 message from a specified developer-controlled wallet. Please note that not all the Dapps currently support Smart Contract Account (SCA), the difference between EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types), and you can check the list of Dapps that support SCA: https://eip1271.io/.
   * @summary Sign message
   * @param {SignMessageForDeveloperRequest} signMessageForDeveloperRequest Sign message for developer request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SigningApi
   */
  public signDeveloperMessage(
    signMessageForDeveloperRequest: SignMessageForDeveloperRequest,
    options?: AxiosRequestConfig
  ) {
    return SigningApiFp(this.configuration)
      .signDeveloperMessage(signMessageForDeveloperRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Sign the EIP-712 typed structured data from a specified developer-controlled wallet. Please note that not all the Dapps currently support Smart Contract Account (SCA), the difference between EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types), and you can check the list of Dapps that support SCA: https://eip1271.io/.
   * @summary Sign typed data
   * @param {SignTypedDataForDeveloperRequest} signTypedDataForDeveloperRequest Sign message for developer request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SigningApi
   */
  public signDeveloperTypedData(
    signTypedDataForDeveloperRequest: SignTypedDataForDeveloperRequest,
    options?: AxiosRequestConfig
  ) {
    return SigningApiFp(this.configuration)
      .signDeveloperTypedData(signTypedDataForDeveloperRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
