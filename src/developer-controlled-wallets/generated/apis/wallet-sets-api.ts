/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setBearerAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { CreateDeveloperWalletSetRequest } from "../models";
// @ts-ignore
import { CreateDeveloperWalletSetResponse } from "../models";
// @ts-ignore
import { CreateWalletSet200Response } from "../models";
// @ts-ignore
import { GetWalletSet200Response } from "../models";
// @ts-ignore
import { ListWalletSets200Response } from "../models";
// @ts-ignore
import { UpdateWalletSet200Response } from "../models";
// @ts-ignore
import { UpdateWalletSetMetadataRequest } from "../models";
/**
 * WalletSetsApi - axios parameter creator
 * @export
 */
export const WalletSetsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Generate a developer controlled wallet set.
     * @summary Create a new wallet set
     * @param {CreateDeveloperWalletSetRequest} createDeveloperWalletSetRequest WalletSet creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWalletSet: async (
      createDeveloperWalletSetRequest: CreateDeveloperWalletSetRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createDeveloperWalletSetRequest' is not null or undefined
      assertParamExists(
        "createWalletSet",
        "createDeveloperWalletSetRequest",
        createDeveloperWalletSetRequest
      );
      const localVarPath = `/developer/walletSets`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createDeveloperWalletSetRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retreive info for a single wallet set.
     * @summary Get a wallet set
     * @param {string} id WalletSet ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletSet: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getWalletSet", "id", id);
      const localVarPath = `/walletSets/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retreive a list of all wallet sets.
     * @summary List wallet sets
     * @param {string} [from] Queries items created since the specified date-time (inclusive).
     * @param {string} [to] Queries items created before the specified date-time (inclusive).
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.   Some collections have a strict upper bound that will disregard this value. In case the specified value is higher  than the allowed limit, the collection limit will be used.   If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletSets: async (
      from?: string,
      to?: string,
      pageBefore?: string,
      pageAfter?: string,
      pageSize?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/walletSets`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (from !== undefined) {
        localVarQueryParameter["from"] =
          (from as any) instanceof Date ? (from as any).toISOString() : from;
      }

      if (to !== undefined) {
        localVarQueryParameter["to"] =
          (to as any) instanceof Date ? (to as any).toISOString() : to;
      }

      if (pageBefore !== undefined) {
        localVarQueryParameter["pageBefore"] = pageBefore;
      }

      if (pageAfter !== undefined) {
        localVarQueryParameter["pageAfter"] = pageAfter;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update the wallet set associated with the given wallet set ID.
     * @summary Update a wallet set
     * @param {string} id WalletSet ID
     * @param {UpdateWalletSetMetadataRequest} updateWalletSetMetadataRequest Update walletSet metadata request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWalletSet: async (
      id: string,
      updateWalletSetMetadataRequest: UpdateWalletSetMetadataRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateWalletSet", "id", id);
      // verify required parameter 'updateWalletSetMetadataRequest' is not null or undefined
      assertParamExists(
        "updateWalletSet",
        "updateWalletSetMetadataRequest",
        updateWalletSetMetadataRequest
      );
      const localVarPath = `/developer/walletSets/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateWalletSetMetadataRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * WalletSetsApi - functional programming interface
 * @export
 */
export const WalletSetsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    WalletSetsApiAxiosParamCreator(configuration);
  return {
    /**
     * Generate a developer controlled wallet set.
     * @summary Create a new wallet set
     * @param {CreateDeveloperWalletSetRequest} createDeveloperWalletSetRequest WalletSet creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createWalletSet(
      createDeveloperWalletSetRequest: CreateDeveloperWalletSetRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CreateWalletSet200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createWalletSet(
        createDeveloperWalletSetRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Retreive info for a single wallet set.
     * @summary Get a wallet set
     * @param {string} id WalletSet ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getWalletSet(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetWalletSet200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getWalletSet(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Retreive a list of all wallet sets.
     * @summary List wallet sets
     * @param {string} [from] Queries items created since the specified date-time (inclusive).
     * @param {string} [to] Queries items created before the specified date-time (inclusive).
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.   Some collections have a strict upper bound that will disregard this value. In case the specified value is higher  than the allowed limit, the collection limit will be used.   If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listWalletSets(
      from?: string,
      to?: string,
      pageBefore?: string,
      pageAfter?: string,
      pageSize?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ListWalletSets200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listWalletSets(
        from,
        to,
        pageBefore,
        pageAfter,
        pageSize,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Update the wallet set associated with the given wallet set ID.
     * @summary Update a wallet set
     * @param {string} id WalletSet ID
     * @param {UpdateWalletSetMetadataRequest} updateWalletSetMetadataRequest Update walletSet metadata request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateWalletSet(
      id: string,
      updateWalletSetMetadataRequest: UpdateWalletSetMetadataRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UpdateWalletSet200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateWalletSet(
        id,
        updateWalletSetMetadataRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * WalletSetsApi - factory interface
 * @export
 */
export const WalletSetsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = WalletSetsApiFp(configuration);
  return {
    /**
     * Generate a developer controlled wallet set.
     * @summary Create a new wallet set
     * @param {CreateDeveloperWalletSetRequest} createDeveloperWalletSetRequest WalletSet creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWalletSet(
      createDeveloperWalletSetRequest: CreateDeveloperWalletSetRequest,
      options?: any
    ): AxiosPromise<CreateWalletSet200Response> {
      return localVarFp
        .createWalletSet(createDeveloperWalletSetRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retreive info for a single wallet set.
     * @summary Get a wallet set
     * @param {string} id WalletSet ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletSet(
      id: string,
      options?: any
    ): AxiosPromise<GetWalletSet200Response> {
      return localVarFp
        .getWalletSet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retreive a list of all wallet sets.
     * @summary List wallet sets
     * @param {string} [from] Queries items created since the specified date-time (inclusive).
     * @param {string} [to] Queries items created before the specified date-time (inclusive).
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.   Some collections have a strict upper bound that will disregard this value. In case the specified value is higher  than the allowed limit, the collection limit will be used.   If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletSets(
      from?: string,
      to?: string,
      pageBefore?: string,
      pageAfter?: string,
      pageSize?: number,
      options?: any
    ): AxiosPromise<ListWalletSets200Response> {
      return localVarFp
        .listWalletSets(from, to, pageBefore, pageAfter, pageSize, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update the wallet set associated with the given wallet set ID.
     * @summary Update a wallet set
     * @param {string} id WalletSet ID
     * @param {UpdateWalletSetMetadataRequest} updateWalletSetMetadataRequest Update walletSet metadata request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWalletSet(
      id: string,
      updateWalletSetMetadataRequest: UpdateWalletSetMetadataRequest,
      options?: any
    ): AxiosPromise<UpdateWalletSet200Response> {
      return localVarFp
        .updateWalletSet(id, updateWalletSetMetadataRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * WalletSetsApi - object-oriented interface
 * @export
 * @class WalletSetsApi
 * @extends {BaseAPI}
 */
export class WalletSetsApi extends BaseAPI {
  /**
   * Generate a developer controlled wallet set.
   * @summary Create a new wallet set
   * @param {CreateDeveloperWalletSetRequest} createDeveloperWalletSetRequest WalletSet creation request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WalletSetsApi
   */
  public createWalletSet(
    createDeveloperWalletSetRequest: CreateDeveloperWalletSetRequest,
    options?: AxiosRequestConfig
  ) {
    return WalletSetsApiFp(this.configuration)
      .createWalletSet(createDeveloperWalletSetRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retreive info for a single wallet set.
   * @summary Get a wallet set
   * @param {string} id WalletSet ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WalletSetsApi
   */
  public getWalletSet(id: string, options?: AxiosRequestConfig) {
    return WalletSetsApiFp(this.configuration)
      .getWalletSet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retreive a list of all wallet sets.
   * @summary List wallet sets
   * @param {string} [from] Queries items created since the specified date-time (inclusive).
   * @param {string} [to] Queries items created before the specified date-time (inclusive).
   * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjuction with pageAfter.
   * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjuction with pageBefore.
   * @param {number} [pageSize] Limits the number of items to be returned.   Some collections have a strict upper bound that will disregard this value. In case the specified value is higher  than the allowed limit, the collection limit will be used.   If avoided, the collection will determine the page size itself.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WalletSetsApi
   */
  public listWalletSets(
    from?: string,
    to?: string,
    pageBefore?: string,
    pageAfter?: string,
    pageSize?: number,
    options?: AxiosRequestConfig
  ) {
    return WalletSetsApiFp(this.configuration)
      .listWalletSets(from, to, pageBefore, pageAfter, pageSize, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update the wallet set associated with the given wallet set ID.
   * @summary Update a wallet set
   * @param {string} id WalletSet ID
   * @param {UpdateWalletSetMetadataRequest} updateWalletSetMetadataRequest Update walletSet metadata request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WalletSetsApi
   */
  public updateWalletSet(
    id: string,
    updateWalletSetMetadataRequest: UpdateWalletSetMetadataRequest,
    options?: AxiosRequestConfig
  ) {
    return WalletSetsApiFp(this.configuration)
      .updateWalletSet(id, updateWalletSetMetadataRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
