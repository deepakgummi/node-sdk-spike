/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setBearerAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { CreateDeveloperWallet200Response } from "../models";
// @ts-ignore
import { CreateDeveloperWalletRequest } from "../models";
// @ts-ignore
import { ExtUpdateWalletMetadataRequest } from "../models";
// @ts-ignore
import { GetWallet200Response } from "../models";
// @ts-ignore
import { ListWalletBallance200Response } from "../models";
// @ts-ignore
import { ListWalletNfts200Response } from "../models";
// @ts-ignore
import { ListWallets200Response } from "../models";
// @ts-ignore
import { UpdateWallet200Response } from "../models";
/**
 * WalletsApi - axios parameter creator
 * @export
 */
export const WalletsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Generates a new developer-controlled wallet or batch of wallets within a wallet set, specifying blockchain and wallet name.
     * @summary Create wallets
     * @param {CreateDeveloperWalletRequest} createDeveloperWalletRequest Wallets creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeveloperWallet: async (
      createDeveloperWalletRequest: CreateDeveloperWalletRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createDeveloperWalletRequest' is not null or undefined
      assertParamExists(
        "createDeveloperWallet",
        "createDeveloperWalletRequest",
        createDeveloperWalletRequest
      );
      const localVarPath = `/developer/wallets`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createDeveloperWalletRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves info for a single developer-controlled wallet using it\'s unique identifier.
     * @summary Get a wallet
     * @param {string} id Wallet ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWallet: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getWallet", "id", id);
      const localVarPath = `/wallets/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Fetches the digital asset balance for a single developer-controlled wallet using its unique identifier.
     * @summary Get token balance for a wallet
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll]
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token addresses.
     * @param {string} [standard] Filter by the token standard.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.   Some collections have a strict upper bound that will disregard this value. In case the specified value is higher  than the allowed limit, the collection limit will be used.   If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletBallance: async (
      id: string,
      includeAll?: boolean,
      name?: string,
      tokenAddress?: string,
      standard?: string,
      pageBefore?: string,
      pageAfter?: string,
      pageSize?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("listWalletBallance", "id", id);
      const localVarPath = `/wallets/{id}/balances`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (includeAll !== undefined) {
        localVarQueryParameter["includeAll"] = includeAll;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (tokenAddress !== undefined) {
        localVarQueryParameter["tokenAddress"] = tokenAddress;
      }

      if (standard !== undefined) {
        localVarQueryParameter["standard"] = standard;
      }

      if (pageBefore !== undefined) {
        localVarQueryParameter["pageBefore"] = pageBefore;
      }

      if (pageAfter !== undefined) {
        localVarQueryParameter["pageAfter"] = pageAfter;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Fetches the info for all NFTs stored in a single developer-controlled wallet, using the wallets unique identifier.
     * @summary Get NFTs for a wallet
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll]
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token addresses.
     * @param {string} [standard] Filter by the token standard.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.   Some collections have a strict upper bound that will disregard this value. In case the specified value is higher  than the allowed limit, the collection limit will be used.   If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletNfts: async (
      id: string,
      includeAll?: boolean,
      name?: string,
      tokenAddress?: string,
      standard?: string,
      pageBefore?: string,
      pageAfter?: string,
      pageSize?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("listWalletNfts", "id", id);
      const localVarPath = `/wallets/{id}/nfts`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (includeAll !== undefined) {
        localVarQueryParameter["includeAll"] = includeAll;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (tokenAddress !== undefined) {
        localVarQueryParameter["tokenAddress"] = tokenAddress;
      }

      if (standard !== undefined) {
        localVarQueryParameter["standard"] = standard;
      }

      if (pageBefore !== undefined) {
        localVarQueryParameter["pageBefore"] = pageBefore;
      }

      if (pageAfter !== undefined) {
        localVarQueryParameter["pageAfter"] = pageAfter;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a list of all developer-controlled wallets that fit the specified parameters.
     * @summary List wallets
     * @param {string} [address] Filter by the Address of the wallet.
     * @param {'ETH' | 'ETH-GOERLI' | 'ETH-SEPOLIA' | 'AVAX' | 'AVAX-FUJI' | 'MATIC' | 'MATIC-MUMBAI'} [blockchain] Filter by blockchain.
     * @param {string} [walletSetId] Filter by the wallet set the wallet belongs to.
     * @param {string} [refId] Filter by the reference identifier set on the wallet.
     * @param {string} [from] Queries items created since the specified date-time (inclusive).
     * @param {string} [to] Queries items created before the specified date-time (inclusive).
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.   Some collections have a strict upper bound that will disregard this value. In case the specified value is higher  than the allowed limit, the collection limit will be used.   If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWallets: async (
      address?: string,
      blockchain?:
        | "ETH"
        | "ETH-GOERLI"
        | "ETH-SEPOLIA"
        | "AVAX"
        | "AVAX-FUJI"
        | "MATIC"
        | "MATIC-MUMBAI",
      walletSetId?: string,
      refId?: string,
      from?: string,
      to?: string,
      pageBefore?: string,
      pageAfter?: string,
      pageSize?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/wallets`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (address !== undefined) {
        localVarQueryParameter["address"] = address;
      }

      if (blockchain !== undefined) {
        localVarQueryParameter["blockchain"] = blockchain;
      }

      if (walletSetId !== undefined) {
        localVarQueryParameter["walletSetId"] = walletSetId;
      }

      if (refId !== undefined) {
        localVarQueryParameter["refId"] = refId;
      }

      if (from !== undefined) {
        localVarQueryParameter["from"] =
          (from as any) instanceof Date ? (from as any).toISOString() : from;
      }

      if (to !== undefined) {
        localVarQueryParameter["to"] =
          (to as any) instanceof Date ? (to as any).toISOString() : to;
      }

      if (pageBefore !== undefined) {
        localVarQueryParameter["pageBefore"] = pageBefore;
      }

      if (pageAfter !== undefined) {
        localVarQueryParameter["pageAfter"] = pageAfter;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates info for a single developer-controlled wallet using it\'s unique identifier.
     * @summary Update a wallet
     * @param {string} id Wallet ID
     * @param {ExtUpdateWalletMetadataRequest} extUpdateWalletMetadataRequest Wallet metadata update request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWallet: async (
      id: string,
      extUpdateWalletMetadataRequest: ExtUpdateWalletMetadataRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateWallet", "id", id);
      // verify required parameter 'extUpdateWalletMetadataRequest' is not null or undefined
      assertParamExists(
        "updateWallet",
        "extUpdateWalletMetadataRequest",
        extUpdateWalletMetadataRequest
      );
      const localVarPath = `/wallets/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        extUpdateWalletMetadataRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * WalletsApi - functional programming interface
 * @export
 */
export const WalletsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WalletsApiAxiosParamCreator(configuration);
  return {
    /**
     * Generates a new developer-controlled wallet or batch of wallets within a wallet set, specifying blockchain and wallet name.
     * @summary Create wallets
     * @param {CreateDeveloperWalletRequest} createDeveloperWalletRequest Wallets creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createDeveloperWallet(
      createDeveloperWalletRequest: CreateDeveloperWalletRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CreateDeveloperWallet200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createDeveloperWallet(
          createDeveloperWalletRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Retrieves info for a single developer-controlled wallet using it\'s unique identifier.
     * @summary Get a wallet
     * @param {string} id Wallet ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getWallet(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetWallet200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getWallet(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Fetches the digital asset balance for a single developer-controlled wallet using its unique identifier.
     * @summary Get token balance for a wallet
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll]
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token addresses.
     * @param {string} [standard] Filter by the token standard.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.   Some collections have a strict upper bound that will disregard this value. In case the specified value is higher  than the allowed limit, the collection limit will be used.   If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listWalletBallance(
      id: string,
      includeAll?: boolean,
      name?: string,
      tokenAddress?: string,
      standard?: string,
      pageBefore?: string,
      pageAfter?: string,
      pageSize?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ListWalletBallance200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listWalletBallance(
          id,
          includeAll,
          name,
          tokenAddress,
          standard,
          pageBefore,
          pageAfter,
          pageSize,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Fetches the info for all NFTs stored in a single developer-controlled wallet, using the wallets unique identifier.
     * @summary Get NFTs for a wallet
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll]
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token addresses.
     * @param {string} [standard] Filter by the token standard.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.   Some collections have a strict upper bound that will disregard this value. In case the specified value is higher  than the allowed limit, the collection limit will be used.   If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listWalletNfts(
      id: string,
      includeAll?: boolean,
      name?: string,
      tokenAddress?: string,
      standard?: string,
      pageBefore?: string,
      pageAfter?: string,
      pageSize?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ListWalletNfts200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listWalletNfts(
        id,
        includeAll,
        name,
        tokenAddress,
        standard,
        pageBefore,
        pageAfter,
        pageSize,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Retrieves a list of all developer-controlled wallets that fit the specified parameters.
     * @summary List wallets
     * @param {string} [address] Filter by the Address of the wallet.
     * @param {'ETH' | 'ETH-GOERLI' | 'ETH-SEPOLIA' | 'AVAX' | 'AVAX-FUJI' | 'MATIC' | 'MATIC-MUMBAI'} [blockchain] Filter by blockchain.
     * @param {string} [walletSetId] Filter by the wallet set the wallet belongs to.
     * @param {string} [refId] Filter by the reference identifier set on the wallet.
     * @param {string} [from] Queries items created since the specified date-time (inclusive).
     * @param {string} [to] Queries items created before the specified date-time (inclusive).
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.   Some collections have a strict upper bound that will disregard this value. In case the specified value is higher  than the allowed limit, the collection limit will be used.   If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listWallets(
      address?: string,
      blockchain?:
        | "ETH"
        | "ETH-GOERLI"
        | "ETH-SEPOLIA"
        | "AVAX"
        | "AVAX-FUJI"
        | "MATIC"
        | "MATIC-MUMBAI",
      walletSetId?: string,
      refId?: string,
      from?: string,
      to?: string,
      pageBefore?: string,
      pageAfter?: string,
      pageSize?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ListWallets200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listWallets(
        address,
        blockchain,
        walletSetId,
        refId,
        from,
        to,
        pageBefore,
        pageAfter,
        pageSize,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Updates info for a single developer-controlled wallet using it\'s unique identifier.
     * @summary Update a wallet
     * @param {string} id Wallet ID
     * @param {ExtUpdateWalletMetadataRequest} extUpdateWalletMetadataRequest Wallet metadata update request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateWallet(
      id: string,
      extUpdateWalletMetadataRequest: ExtUpdateWalletMetadataRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UpdateWallet200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateWallet(
        id,
        extUpdateWalletMetadataRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * WalletsApi - factory interface
 * @export
 */
export const WalletsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = WalletsApiFp(configuration);
  return {
    /**
     * Generates a new developer-controlled wallet or batch of wallets within a wallet set, specifying blockchain and wallet name.
     * @summary Create wallets
     * @param {CreateDeveloperWalletRequest} createDeveloperWalletRequest Wallets creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeveloperWallet(
      createDeveloperWalletRequest: CreateDeveloperWalletRequest,
      options?: any
    ): AxiosPromise<CreateDeveloperWallet200Response> {
      return localVarFp
        .createDeveloperWallet(createDeveloperWalletRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves info for a single developer-controlled wallet using it\'s unique identifier.
     * @summary Get a wallet
     * @param {string} id Wallet ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWallet(id: string, options?: any): AxiosPromise<GetWallet200Response> {
      return localVarFp
        .getWallet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Fetches the digital asset balance for a single developer-controlled wallet using its unique identifier.
     * @summary Get token balance for a wallet
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll]
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token addresses.
     * @param {string} [standard] Filter by the token standard.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.   Some collections have a strict upper bound that will disregard this value. In case the specified value is higher  than the allowed limit, the collection limit will be used.   If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletBallance(
      id: string,
      includeAll?: boolean,
      name?: string,
      tokenAddress?: string,
      standard?: string,
      pageBefore?: string,
      pageAfter?: string,
      pageSize?: number,
      options?: any
    ): AxiosPromise<ListWalletBallance200Response> {
      return localVarFp
        .listWalletBallance(
          id,
          includeAll,
          name,
          tokenAddress,
          standard,
          pageBefore,
          pageAfter,
          pageSize,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Fetches the info for all NFTs stored in a single developer-controlled wallet, using the wallets unique identifier.
     * @summary Get NFTs for a wallet
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll]
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token addresses.
     * @param {string} [standard] Filter by the token standard.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.   Some collections have a strict upper bound that will disregard this value. In case the specified value is higher  than the allowed limit, the collection limit will be used.   If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletNfts(
      id: string,
      includeAll?: boolean,
      name?: string,
      tokenAddress?: string,
      standard?: string,
      pageBefore?: string,
      pageAfter?: string,
      pageSize?: number,
      options?: any
    ): AxiosPromise<ListWalletNfts200Response> {
      return localVarFp
        .listWalletNfts(
          id,
          includeAll,
          name,
          tokenAddress,
          standard,
          pageBefore,
          pageAfter,
          pageSize,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a list of all developer-controlled wallets that fit the specified parameters.
     * @summary List wallets
     * @param {string} [address] Filter by the Address of the wallet.
     * @param {'ETH' | 'ETH-GOERLI' | 'ETH-SEPOLIA' | 'AVAX' | 'AVAX-FUJI' | 'MATIC' | 'MATIC-MUMBAI'} [blockchain] Filter by blockchain.
     * @param {string} [walletSetId] Filter by the wallet set the wallet belongs to.
     * @param {string} [refId] Filter by the reference identifier set on the wallet.
     * @param {string} [from] Queries items created since the specified date-time (inclusive).
     * @param {string} [to] Queries items created before the specified date-time (inclusive).
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.   Some collections have a strict upper bound that will disregard this value. In case the specified value is higher  than the allowed limit, the collection limit will be used.   If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWallets(
      address?: string,
      blockchain?:
        | "ETH"
        | "ETH-GOERLI"
        | "ETH-SEPOLIA"
        | "AVAX"
        | "AVAX-FUJI"
        | "MATIC"
        | "MATIC-MUMBAI",
      walletSetId?: string,
      refId?: string,
      from?: string,
      to?: string,
      pageBefore?: string,
      pageAfter?: string,
      pageSize?: number,
      options?: any
    ): AxiosPromise<ListWallets200Response> {
      return localVarFp
        .listWallets(
          address,
          blockchain,
          walletSetId,
          refId,
          from,
          to,
          pageBefore,
          pageAfter,
          pageSize,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates info for a single developer-controlled wallet using it\'s unique identifier.
     * @summary Update a wallet
     * @param {string} id Wallet ID
     * @param {ExtUpdateWalletMetadataRequest} extUpdateWalletMetadataRequest Wallet metadata update request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWallet(
      id: string,
      extUpdateWalletMetadataRequest: ExtUpdateWalletMetadataRequest,
      options?: any
    ): AxiosPromise<UpdateWallet200Response> {
      return localVarFp
        .updateWallet(id, extUpdateWalletMetadataRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * WalletsApi - object-oriented interface
 * @export
 * @class WalletsApi
 * @extends {BaseAPI}
 */
export class WalletsApi extends BaseAPI {
  /**
   * Generates a new developer-controlled wallet or batch of wallets within a wallet set, specifying blockchain and wallet name.
   * @summary Create wallets
   * @param {CreateDeveloperWalletRequest} createDeveloperWalletRequest Wallets creation request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WalletsApi
   */
  public createDeveloperWallet(
    createDeveloperWalletRequest: CreateDeveloperWalletRequest,
    options?: AxiosRequestConfig
  ) {
    return WalletsApiFp(this.configuration)
      .createDeveloperWallet(createDeveloperWalletRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieves info for a single developer-controlled wallet using it\'s unique identifier.
   * @summary Get a wallet
   * @param {string} id Wallet ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WalletsApi
   */
  public getWallet(id: string, options?: AxiosRequestConfig) {
    return WalletsApiFp(this.configuration)
      .getWallet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Fetches the digital asset balance for a single developer-controlled wallet using its unique identifier.
   * @summary Get token balance for a wallet
   * @param {string} id Wallet ID
   * @param {boolean} [includeAll]
   * @param {string} [name] Filter by token name.
   * @param {string} [tokenAddress] Filter by token addresses.
   * @param {string} [standard] Filter by the token standard.
   * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjuction with pageAfter.
   * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjuction with pageBefore.
   * @param {number} [pageSize] Limits the number of items to be returned.   Some collections have a strict upper bound that will disregard this value. In case the specified value is higher  than the allowed limit, the collection limit will be used.   If avoided, the collection will determine the page size itself.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WalletsApi
   */
  public listWalletBallance(
    id: string,
    includeAll?: boolean,
    name?: string,
    tokenAddress?: string,
    standard?: string,
    pageBefore?: string,
    pageAfter?: string,
    pageSize?: number,
    options?: AxiosRequestConfig
  ) {
    return WalletsApiFp(this.configuration)
      .listWalletBallance(
        id,
        includeAll,
        name,
        tokenAddress,
        standard,
        pageBefore,
        pageAfter,
        pageSize,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Fetches the info for all NFTs stored in a single developer-controlled wallet, using the wallets unique identifier.
   * @summary Get NFTs for a wallet
   * @param {string} id Wallet ID
   * @param {boolean} [includeAll]
   * @param {string} [name] Filter by token name.
   * @param {string} [tokenAddress] Filter by token addresses.
   * @param {string} [standard] Filter by the token standard.
   * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjuction with pageAfter.
   * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjuction with pageBefore.
   * @param {number} [pageSize] Limits the number of items to be returned.   Some collections have a strict upper bound that will disregard this value. In case the specified value is higher  than the allowed limit, the collection limit will be used.   If avoided, the collection will determine the page size itself.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WalletsApi
   */
  public listWalletNfts(
    id: string,
    includeAll?: boolean,
    name?: string,
    tokenAddress?: string,
    standard?: string,
    pageBefore?: string,
    pageAfter?: string,
    pageSize?: number,
    options?: AxiosRequestConfig
  ) {
    return WalletsApiFp(this.configuration)
      .listWalletNfts(
        id,
        includeAll,
        name,
        tokenAddress,
        standard,
        pageBefore,
        pageAfter,
        pageSize,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieves a list of all developer-controlled wallets that fit the specified parameters.
   * @summary List wallets
   * @param {string} [address] Filter by the Address of the wallet.
   * @param {'ETH' | 'ETH-GOERLI' | 'ETH-SEPOLIA' | 'AVAX' | 'AVAX-FUJI' | 'MATIC' | 'MATIC-MUMBAI'} [blockchain] Filter by blockchain.
   * @param {string} [walletSetId] Filter by the wallet set the wallet belongs to.
   * @param {string} [refId] Filter by the reference identifier set on the wallet.
   * @param {string} [from] Queries items created since the specified date-time (inclusive).
   * @param {string} [to] Queries items created before the specified date-time (inclusive).
   * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjuction with pageAfter.
   * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjuction with pageBefore.
   * @param {number} [pageSize] Limits the number of items to be returned.   Some collections have a strict upper bound that will disregard this value. In case the specified value is higher  than the allowed limit, the collection limit will be used.   If avoided, the collection will determine the page size itself.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WalletsApi
   */
  public listWallets(
    address?: string,
    blockchain?:
      | "ETH"
      | "ETH-GOERLI"
      | "ETH-SEPOLIA"
      | "AVAX"
      | "AVAX-FUJI"
      | "MATIC"
      | "MATIC-MUMBAI",
    walletSetId?: string,
    refId?: string,
    from?: string,
    to?: string,
    pageBefore?: string,
    pageAfter?: string,
    pageSize?: number,
    options?: AxiosRequestConfig
  ) {
    return WalletsApiFp(this.configuration)
      .listWallets(
        address,
        blockchain,
        walletSetId,
        refId,
        from,
        to,
        pageBefore,
        pageAfter,
        pageSize,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Updates info for a single developer-controlled wallet using it\'s unique identifier.
   * @summary Update a wallet
   * @param {string} id Wallet ID
   * @param {ExtUpdateWalletMetadataRequest} extUpdateWalletMetadataRequest Wallet metadata update request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WalletsApi
   */
  public updateWallet(
    id: string,
    extUpdateWalletMetadataRequest: ExtUpdateWalletMetadataRequest,
    options?: AxiosRequestConfig
  ) {
    return WalletsApiFp(this.configuration)
      .updateWallet(id, extUpdateWalletMetadataRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
