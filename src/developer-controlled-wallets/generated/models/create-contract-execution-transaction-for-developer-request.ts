/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// May contain unused imports in some cases
// @ts-ignore
import { AbiParametersInner } from "./abi-parameters-inner";
// May contain unused imports in some cases
// @ts-ignore
import { FeeLevel } from "./fee-level";

/**
 *
 * @export
 * @interface CreateContractExecutionTransactionForDeveloperRequest
 */
export interface CreateContractExecutionTransactionForDeveloperRequest {
  /**
   * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
   * @type {string}
   * @memberof CreateContractExecutionTransactionForDeveloperRequest
   */
  idempotencyKey: string;
  /**
   * The contract ABI function signature or `callData` field is required for interacting with the smart contract. The ABI function signature cannot be used simultaneously with `callData`. e.g. burn(uint256)
   * @type {string}
   * @memberof CreateContractExecutionTransactionForDeveloperRequest
   */
  abiFunctionSignature?: string;
  /**
   * The contract ABI function signature parameters for executing the contract interaction. Supported parameter types include string, integer, boolean, and array. These parameters should be used exclusively with the abiFunctionSignature and cannot be used with `callData`.
   * @type {Array<AbiParametersInner>}
   * @memberof CreateContractExecutionTransactionForDeveloperRequest
   */
  abiParameters?: Array<AbiParametersInner>;
  /**
   * The raw transaction data, must be an even-length hexadecimal string with the `0x` prefix, to be executed. It is important to note that the usage of `callData` is mutually exclusive with the `abiFunctionSignature` and `abiParameters`. Therefore, `callData` cannot be utilized simultaneously with either `abiFunctionSignature` or `abiParameters`.
   * @type {string}
   * @memberof CreateContractExecutionTransactionForDeveloperRequest
   */
  callData?: string;
  /**
   * The amount of native token that will be sent to the contract abi execution. Optional field for payable api only, if not provided, no native token will be sent.
   * @type {string}
   * @memberof CreateContractExecutionTransactionForDeveloperRequest
   */
  amount?: string;
  /**
   * The blockchain address of the contract to be executed.
   * @type {string}
   * @memberof CreateContractExecutionTransactionForDeveloperRequest
   */
  contractAddress: string;
  /**
   * A base64 string expression of the entity secret ciphertext. The entity secret should be encrypted by the entity public key. Circle mandates that the entity secret ciphertext is unique for each API request.
   * @type {string}
   * @memberof CreateContractExecutionTransactionForDeveloperRequest
   */
  entitySecretCiphertext: string;
  /**
   *
   * @type {FeeLevel}
   * @memberof CreateContractExecutionTransactionForDeveloperRequest
   */
  feeLevel?: FeeLevel;
  /**
   * The maximum units of gas to be used for the transaction. Required if `feeLevel` is not provided. Estimates for this limit can be obtained through the estimate fee API call.
   * @type {string}
   * @memberof CreateContractExecutionTransactionForDeveloperRequest
   */
  gasLimit?: string;
  /**
   * For blockchains with EIP-1559 support, the maximum price of gas, in gwei, to be used per each unit of gas (see `gasLimit`). Requires `gasLimit`. Cannot be used with `feeLevel`, `priorityFee`, or `maxFee`. Estimates for this fee can be obtained through the estimate fee API call.
   * @type {string}
   * @memberof CreateContractExecutionTransactionForDeveloperRequest
   */
  gasPrice?: string;
  /**
   * The maximum price per unit of gas (see `gasLimit`), in gwei. Requires `priorityFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the estimate fee API call.
   * @type {string}
   * @memberof CreateContractExecutionTransactionForDeveloperRequest
   */
  maxFee?: string;
  /**
   * The “tip”, in gwei, to be added to the base fee as an incentive for validators.  Please note that the `maxFee` and `gasLimit` parameters are required alongside the `priorityFee`. The `feeLevel` and `gasPrice` parameters cannot be used with the `priorityFee`. Estimations for this fee can be obtained through the estimate fee API call.  The base fee represents the minimum fee required for a transaction to be included in a block on the blockchain. It is measured in gwei and compensates for the computational resources validators consume to process the transaction. The base fee is supplemented by a separate \"tip\" called the priority fee, which acts as an extra incentive for validators to prioritize the transaction. The priority fee is added to the base fee to calculate the final transaction fee.
   * @type {string}
   * @memberof CreateContractExecutionTransactionForDeveloperRequest
   */
  priorityFee?: string;
  /**
   * Optional reference or description used to identify the transaction.
   * @type {string}
   * @memberof CreateContractExecutionTransactionForDeveloperRequest
   */
  refId?: string;
  /**
   * Unique system generated identifier of the wallet. Required when source Address and blockchain is not provided. Mutually exclusive. For contract deploys this wallet ID will be used as the source.
   * @type {string}
   * @memberof CreateContractExecutionTransactionForDeveloperRequest
   */
  walletId: string;
}
