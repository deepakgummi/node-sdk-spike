/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// May contain unused imports in some cases
// @ts-ignore
import { AbiParametersInner } from "./abi-parameters-inner";
// May contain unused imports in some cases
// @ts-ignore
import { Blockchain } from "./blockchain";

/**
 *
 * @export
 * @interface EstimateContractExecutionTransactionFeeRequest
 */
export interface EstimateContractExecutionTransactionFeeRequest {
  /**
   * The contract ABI function signature or `callData` field is required for interacting with the smart contract. The ABI function signature cannot be used simultaneously with `callData`. e.g. burn(uint256)
   * @type {string}
   * @memberof EstimateContractExecutionTransactionFeeRequest
   */
  abiFunctionSignature: string;
  /**
   * The contract ABI function signature parameters for executing the contract interaction. Supported parameter types include string, integer, boolean, and array. These parameters should be used exclusively with the abiFunctionSignature and cannot be used with `callData`.
   * @type {Array<AbiParametersInner>}
   * @memberof EstimateContractExecutionTransactionFeeRequest
   */
  abiParameters?: Array<AbiParametersInner>;
  /**
   * The raw transaction data, must be an even-length hexadecimal string with the `0x` prefix, to be executed. It is important to note that the usage of `callData` is mutually exclusive with the `abiFunctionSignature` and `abiParameters`. Therefore, `callData` cannot be utilized simultaneously with either `abiFunctionSignature` or `abiParameters`.
   * @type {string}
   * @memberof EstimateContractExecutionTransactionFeeRequest
   */
  callData?: string;
  /**
   * The amount of native token that will be sent to the contract abi execution. Optional field for payable api only, if not provided, no native token will be sent.
   * @type {string}
   * @memberof EstimateContractExecutionTransactionFeeRequest
   */
  amount?: string;
  /**
   * Blockchain associated with the transaction. Required along with sourceAddress if walletId is not provided. The blockchain and walletId fields are mutually exclusive.
   * @type {Blockchain}
   * @memberof EstimateContractExecutionTransactionFeeRequest
   */
  blockchain?: Blockchain;
  /**
   * The blockchain address of the contract to be executed.
   * @type {string}
   * @memberof EstimateContractExecutionTransactionFeeRequest
   */
  contractAddress: string;
  /**
   * Source address of the transaction. Required along with blockchain if walletId is not provided. The sourceAddress and walletId fields are mutually exclusive.
   * @type {string}
   * @memberof EstimateContractExecutionTransactionFeeRequest
   */
  sourceAddress?: string;
  /**
   * The source wallet id of the transaction. Required if sourceAddress and blockchain are not provided. The walletId field is mutually exclusive to the blockchain and sourceAddress fields.
   * @type {string}
   * @memberof EstimateContractExecutionTransactionFeeRequest
   */
  walletId?: string;
}
